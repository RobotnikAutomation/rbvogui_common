bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: robot_map
    robot_base_frame: robot_base_link
    odom_topic: /robot/robotnik_base_controller/odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 50.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 2.0
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: -1.0
      min_vel_y: 0.0
      max_vel_x: 1.0
      max_vel_y: 0.0
      max_vel_theta: 0.5
      min_speed_xy: -0.5
      max_speed_xy: 1.0
      min_speed_theta: -0.5
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 0.5
      acc_lim_y: 0.0
      acc_lim_theta: 0.9
      decel_lim_x: -0.5
      decel_lim_y: 0.0
      decel_lim_theta: -0.9
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0

      # plugin: "nav2_mppi_controller::MPPIController"
      # time_steps: 56
      # model_dt: 0.05
      # batch_size: 1000
      # vx_std: 0.1
      # vy_std: 0.0
      # wz_std: 0.1
      # vx_max: 1.0
      # vx_min: -1.0
      # vy_max: 0.0
      # wz_max: 0.5
      # iteration_count: 1
      # prune_distance: 1.7
      # transform_tolerance: 0.1
      # temperature: 0.3
      # gamma: 0.015
      # motion_model: "Ackermann"
      # visualize: true
      # TrajectoryVisualizer:
      #   trajectory_step: 5
      #   time_step: 3
      # AckermannConstraints:
      #   min_turning_r: 1.0
      # critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      # ConstraintCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 4.0
      # GoalCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 5.0
      #   threshold_to_consider: 1.4
      # GoalAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 3.0
      #   threshold_to_consider: 0.5
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 20.0
      #   threshold_to_consider: 0.5
      # # Option to replace Cost and use Obstacles instead
      # ObstaclesCritic:
      #   enabled: true
      #   cost_power: 1
      #   repulsion_weight: 1.5
      #   critical_weight: 20.0
      #   consider_footprint: true
      #   collision_cost: 10000.0
      #   collision_margin_distance: 0.1
      #   near_goal_distance: 0.5
      # # CostCritic:
      # #   enabled: true
      # #   cost_power: 1
      # #   cost_weight: 10.0
      # #   critical_cost: 300.0
      # #   consider_footprint: true
      # #   collision_cost: 1000000.0
      # #   near_goal_distance: 1.0
      # #   trajectory_point_step: 2
      # PathAlignCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 14.0
      #   max_path_occupancy_ratio: 0.05
      #   trajectory_point_step: 4
      #   threshold_to_consider: 0.5
      #   offset_from_furthest: 20
      #   use_path_orientations: false
      # PathFollowCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 9.0
      #   offset_from_furthest: 5
      #   threshold_to_consider: 1.4
      # PathAngleCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 0.1
      #   offset_from_furthest: 4
      #   threshold_to_consider: 0.5
      #   max_angle_to_furthest: 0.785398
      #   forward_preference: true
      # PreferForwardCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 20.0
      #   threshold_to_consider: 0.5
      # VelocityDeadbandCritic:
      #   enabled: true
      #   cost_power: 1
      #   cost_weight: 35.0
      #   deadband_velocities: [0.05, 0.05, 0.05]
      # TwirlingCritic:
      #   enabled: true
      #   twirling_cost_power: 1
      #   twirling_cost_weight: 10.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 10.0
      publish_frequency: 2.0
      global_frame: robot_odom
      robot_base_frame: robot_base_link
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.05
      lethal_cost_threshold: 1000
      footprint: "[[0.65, 0.42], [0.65, -0.42], [2.0, -0.42], [-2.0, 0.42]]"
      robot_radius: 1.0
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 2.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        footprint_clearing_enabled: true
        observation_sources: front_right_scan
        front_right_scan:
          topic: /front_laser/scan
          observation_persistence: 2.0
          expected_update_rate: 20.0
          data_type: "LaserScan"
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          inf_is_valid: True
          marking: True
          clearing: True
          obstacle_max_range: 10.5
          obstacle_min_range: 1.8
          raytrace_max_range: 11.0
          raytrace_min_range: 0.0
      #   rear_left_scan:
      #     topic: /rear_laser/scan
      #     observation_persistence: 2.0
      #     expected_update_rate: 20.0
      #     data_type: "LaserScan"
      #     min_obstacle_height: 0.0
      #     max_obstacle_height: 2.0
      #     inf_is_valid: True
      #     marking: True
      #     clearing: True
      #     obstacle_max_range: 10.5
      #     obstacle_min_range: 0.0
      #     raytrace_max_range: 11.0
      #     raytrace_min_range: 0.0
      # static_layer:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_subscribe_transient_local: True
      # always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: robot_map
      robot_base_frame: robot_base_link
      use_sim_time: True
      footprint: "[[0.65, 0.42], [0.65, -0.42], [2.0, -0.42], [-2.0, 0.42]]"
      robot_radius: 1.0
      resolution: 0.05
      track_unknown_space: true
      lethal_cost_threshold: 1000
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        footprint_clearing_enabled: true
        max_obstacle_height: 2.0
        combination_method: 1
        observation_sources: front_right_scan
        front_right_scan:
          topic: /front_laser/scan
          observation_persistence: 2.0
          expected_update_rate: 20.0
          data_type: "LaserScan"
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          inf_is_valid: false
          marking: True
          clearing: True
          obstacle_max_range: 10.5
          obstacle_min_range: 1.8
          raytrace_max_range: 11.0
          raytrace_min_range: 1.0
        rear_left_scan:
          topic: /rear_laser/scan
          observation_persistence: 2.0
          expected_update_rate: 20.0
          data_type: "LaserScan"
          min_obstacle_height: 0.0
          max_obstacle_height: 2.0
          inf_is_valid: True
          marking: True
          clearing: True
          obstacle_max_range: 10.5
          obstacle_min_range: 0.0
          raytrace_max_range: 11.0
          raytrace_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 2.0
        cost_scaling_factor: 1.0
        inflate_unknown: false
        inflate_around_unknown: true
      always_send_full_costmap: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      # plugin: "nav2_navfn_planner/NavfnPlanner"
      # tolerance: 0.5
      # use_astar: false
      # allow_unknown: true

      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "REEDS_SHEPP"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      minimum_turning_radius: 1.3        # minimum turning radius in m of path / vehicle
      reverse_penalty: 50.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 3.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      smooth_path: False # was True                   # If true, does a simple and quick smoothing post-processing to the path

      smoother:
        max_iterations: 1000
        w_smooth: 0.1 # was 0.3
        w_data: 0.3 # was 0.2
        tolerance: 1e-10
        do_refinement: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: robot_odom
    robot_base_frame: robot_base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.5
    min_rotational_vel: 0.1
    rotational_acc_lim: 3.2

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 50.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [1.0, 0.0, 0.5]
    min_velocity: [-1.0, 0.0, -0.5]
    max_accel: [0.9, 0.9, 1.2]
    max_decel: [-0.9, -0.9, -1.2]
    odom_topic: /robot/robotnik_base_controller/odom
    odom_duration: 0.1
    deadband_velocity: [0.01, 0.01, 0.05]
    velocity_timeout: 1.0
